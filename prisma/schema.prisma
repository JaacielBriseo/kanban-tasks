// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id      String   @id @default(uuid())
  name    String
  columns Column[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Column {
  id    String @id @default(uuid())
  name  String
  tasks Task[]

  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String?
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  status      String
  subtasks    Subtask[]

  column   Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId String
}

model Subtask {
  id          String  @id @default(uuid())
  title       String
  isCompleted Boolean

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

// Auth.js
model Account {
  id                       String  @id @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  boards   Board[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
